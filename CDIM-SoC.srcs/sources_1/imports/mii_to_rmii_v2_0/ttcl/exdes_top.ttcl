<: set ComponentName [getComponentNameString] :>
<: setOutputDirectory [ttcl_string_concat $ComponentName "/example_design"] :>
<: setFileName [ttcl_string_concat $ComponentName "_exdes"] :>
<: set C_MODE  [get_property PARAM_VALUE.C_MODE ] :>
<: set C_SPEED_100  [get_property PARAM_VALUE.C_SPEED_100 ] :>
<: set wd [ file dirname [ get_property xml_file_name [ current_ipbom ] ] ] :>
<: setFileExtension ".vhd" :>
--Example design Top
-- file: exdes_top.vhd
-- 
-- (c) Copyright 2008 - 2013 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
------------------------------------------------------------------------------
-- User entered comments
------------------------------------------------------------------------------
-- This is a self-desigined TOP Wrapper developed for MII to RMII Example Design
--
------------------------------------------------------------------------------





library ieee;
    use ieee.std_logic_1164.all;
    use ieee.std_logic_arith.all;
    use ieee.std_logic_unsigned.all;
    use ieee.numeric_std.all;
    use ieee.std_logic_misc.all;

Library UNISIM;
use UNISIM.vcomponents.all;

library work;

entity <=:$ComponentName:>_exdes is
 PORT (
 
    clk_p       : in std_logic;
    clk_n       : in std_logic;
    reset       : in std_logic;
	atg_done    : OUT STD_LOGIC;
	atg_status  : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)

 
  );
end entity;

ARCHITECTURE exdes_top_arch OF <=:$ComponentName:>_exdes IS
  ATTRIBUTE DowngradeIPIdentifiedWarnings : string;
  ATTRIBUTE DowngradeIPIdentifiedWarnings OF exdes_top_arch: ARCHITECTURE IS "yes";

COMPONENT clk_wiz_0
port
 (-- Clock in ports
  clk_in1_p         : in     std_logic;
  clk_in1_n         : in     std_logic;
  -- Clock out ports
  clk_out1          : out    std_logic;
  clk_out2          : out    std_logic;
  -- Status and control signals
  reset             : in     std_logic;
  locked            : out    std_logic
 );
end COMPONENT;

  
  
  
  COMPONENT axi_ethernetlite_0 IS
    PORT (
      s_axi_aclk : IN STD_LOGIC;
      s_axi_aresetn : IN STD_LOGIC;
      ip2intc_irpt : OUT STD_LOGIC;
      s_axi_awaddr : IN STD_LOGIC_VECTOR(12 DOWNTO 0);
      s_axi_awvalid : IN STD_LOGIC;
      s_axi_awready : OUT STD_LOGIC;
      s_axi_wdata : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_axi_wstrb : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_axi_wvalid : IN STD_LOGIC;
      s_axi_wready : OUT STD_LOGIC;
      s_axi_bresp : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_bvalid : OUT STD_LOGIC;
      s_axi_bready : IN STD_LOGIC;
      s_axi_araddr : IN STD_LOGIC_VECTOR(12 DOWNTO 0);
      s_axi_arvalid : IN STD_LOGIC;
      s_axi_arready : OUT STD_LOGIC;
      s_axi_rdata : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_axi_rresp : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_axi_rvalid : OUT STD_LOGIC;
      s_axi_rready : IN STD_LOGIC;
      phy_tx_clk : IN STD_LOGIC;
      phy_rx_clk : IN STD_LOGIC;
      phy_crs : IN STD_LOGIC;
      phy_dv : IN STD_LOGIC;
      phy_rx_data : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      phy_col : IN STD_LOGIC;
      phy_rx_er : IN STD_LOGIC;
      phy_rst_n : OUT STD_LOGIC;
      phy_tx_en : OUT STD_LOGIC;
      phy_tx_data : OUT STD_LOGIC_VECTOR(3 DOWNTO 0) 
    );
  END COMPONENT axi_ethernetlite_0;
component axi_traffic_gen_0 is 
  port (
  s_axi_aclk : in std_logic;
  s_axi_aresetn : in std_logic;
  m_axi_lite_ch1_awaddr : out std_logic_vector (31 downto 0);
  m_axi_lite_ch1_awprot : out std_logic_vector (2 downto 0);
  m_axi_lite_ch1_awvalid : out std_logic;
  m_axi_lite_ch1_awready : in std_logic;
  m_axi_lite_ch1_wdata : out std_logic_vector (31 downto 0);
  m_axi_lite_ch1_wstrb : out std_logic_vector (3 downto 0);
  m_axi_lite_ch1_wvalid : out std_logic;
  m_axi_lite_ch1_wready : in std_logic;
  m_axi_lite_ch1_bresp : in std_logic_vector (1 downto 0);
  m_axi_lite_ch1_bvalid : in std_logic;
  m_axi_lite_ch1_bready : out std_logic;
  m_axi_lite_ch1_araddr : out std_logic_vector (31 downto 0);
  m_axi_lite_ch1_arvalid : out std_logic;
  m_axi_lite_ch1_arready : in std_logic;
  m_axi_lite_ch1_rdata : in std_logic_vector (31 downto 0);
  m_axi_lite_ch1_rvalid : in std_logic;
  m_axi_lite_ch1_rready : out std_logic;
  m_axi_lite_ch1_rresp : in std_logic_vector (1 downto 0);
  done : out std_logic;
  status : out std_logic_vector (31 downto 0)
);
end component;
component <=:$ComponentName:> IS
  PORT (
    rst_n : IN STD_LOGIC;
    ref_clk : IN STD_LOGIC;
    mac2rmii_tx_en : IN STD_LOGIC;
    mac2rmii_txd : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    mac2rmii_tx_er : IN STD_LOGIC;
    rmii2mac_tx_clk : OUT STD_LOGIC;
    rmii2mac_rx_clk : OUT STD_LOGIC;
    rmii2mac_col : OUT STD_LOGIC;
    rmii2mac_crs : OUT STD_LOGIC;
    rmii2mac_rx_dv : OUT STD_LOGIC;
    rmii2mac_rx_er : OUT STD_LOGIC;
    rmii2mac_rxd : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    phy2rmii_crs_dv : IN STD_LOGIC;
    phy2rmii_rx_er : IN STD_LOGIC;
    phy2rmii_rxd : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    rmii2phy_txd : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    rmii2phy_tx_en : OUT STD_LOGIC
  );
end component;


-- Internal signal declerations
signal    s_axi_awready          :  std_logic                         ;-- AXI4-Lite
signal    s_axi_awvalid          :  std_logic                         ;-- AXI4-Lite
signal    s_axi_awaddr           :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    s_axi_wready           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_wvalid           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_wstrb            :  std_logic_vector (3  downto 0);-- AXI4-Lite
signal    s_axi_wdata            :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    s_axi_bready           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_bvalid           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_bresp            :  std_logic_vector(1 downto 0)      ;-- AXI4-Lite
signal    s_axi_arready          :  std_logic                         ;-- AXI4-Lite
signal    s_axi_arvalid          :  std_logic                         ;-- AXI4-Lite
signal    s_axi_araddr           :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    s_axi_rready           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_rvalid           :  std_logic                         ;-- AXI4-Lite
signal    s_axi_rdata            :  std_logic_vector (31 downto 0);-- AXI4-Lite
signal    s_axi_rresp            :  std_logic_vector(1 downto 0)      ;-- AXI4-Lite

signal  phy_tx_en      :  STD_LOGIC;
signal  phy_rst_n      :  STD_LOGIC;
signal  phy_tx_data    :  STD_LOGIC_VECTOR(3 DOWNTO 0);
signal  phy_tx_clk     :  STD_LOGIC;
signal  phy_rx_clk     :  STD_LOGIC;
signal  phy_col        :  STD_LOGIC;
signal  phy_crs        :  STD_LOGIC;
signal  phy_dv         :  STD_LOGIC;
signal  phy_rx_er      :  STD_LOGIC;
signal  phy_rx_data    :  STD_LOGIC_VECTOR(3 DOWNTO 0);
signal  rmii2phy_tx_en :  STD_LOGIC;
signal  rmii2phy_txd   :  STD_LOGIC_VECTOR(1 DOWNTO 0);
signal  const0         :  STD_LOGIC_VECTOR(32 DOWNTO 0);
signal  Count   :  STD_LOGIC_VECTOR(1 DOWNTO 0):="00";
signal  exdes_clk      :  STD_LOGIC;
signal  ethernetlite_in_clk      :  STD_LOGIC;
signal  exdes_resetn      :  STD_LOGIC;
signal  locked      :  STD_LOGIC;
signal  local_rst      :  STD_LOGIC;

signal s_out_d1_cdc_to          : std_logic := '0';
--attribute DONT_TOUCH of s_out_d1_cdc_to : signal is "true";
signal s_out_d2           	: std_logic := '0';
signal prmry_in_xored           : std_logic := '0';
signal p_in_d1_cdc_from   	: std_logic := '0';


  ATTRIBUTE async_reg                      	: STRING;
  ATTRIBUTE async_reg OF REG_P_IN2_cdc_to  			: label IS "true"; 
  ATTRIBUTE async_reg OF P_IN_CROSS2SCNDRY_s_out_d2  		: label IS "true"; 


begin


RESET_PROCESS : process ( phy_tx_clk )
begin
    if (phy_tx_clk'event and phy_tx_clk = '1') then
        if (locked = '0') then
            Count  <=  "00";
		else
        if ((locked = '1') and (Count /= "11")) then
            Count  <=  Count + 1;
        else
            Count  <=  Count;
        end if;
       end if;
    end if;
end process;

local_rst <= '1' when Count = "11" else '0';


 
REG_P_IN_cdc_from : component FDR
                   generic map(INIT => '0'
                   )port map (
                              Q  => p_in_d1_cdc_from,
                              C  => phy_tx_clk,
                              D  => local_rst,
                              R  => '0'
                            );
REG_P_IN2_cdc_to : component FDR
                   generic map(INIT => '0'
                   )port map (
                              Q  => s_out_d1_cdc_to,
                              C  => ethernetlite_in_clk,
                              D  => p_in_d1_cdc_from,
                              R  => '0'
                            );
P_IN_CROSS2SCNDRY_s_out_d2 : component FDR
                   generic map(INIT => '0'
                   )port map (
                              Q  => exdes_resetn,
                              C  => ethernetlite_in_clk,
                              D  => s_out_d1_cdc_to,
                              R  => '0'
                            );



CLK_GEN : clk_wiz_0
   port map ( 
   -- Clock in ports
   clk_in1_p => clk_p,
   clk_in1_n => clk_n,
  -- Clock out ports  
   clk_out1 => exdes_clk,
   clk_out2 => ethernetlite_in_clk,
  -- Status and control signals                
   reset => reset,
   locked => locked            
 );



  ATG_SRC:  axi_traffic_gen_0 
   port map (
    s_axi_aclk         => ethernetlite_in_clk,
    s_axi_aresetn      => exdes_resetn,
    m_axi_lite_ch1_awaddr   => s_axi_awaddr,
    m_axi_lite_ch1_awprot   => open,
    m_axi_lite_ch1_awvalid  => s_axi_awvalid,
    m_axi_lite_ch1_awready  => s_axi_awready,
    m_axi_lite_ch1_wdata    => s_axi_wdata,
    m_axi_lite_ch1_wstrb    => s_axi_wstrb,
    m_axi_lite_ch1_wvalid   => s_axi_wvalid,
    m_axi_lite_ch1_wready   => s_axi_wready,
    m_axi_lite_ch1_bresp    => s_axi_bresp,
    m_axi_lite_ch1_bvalid   => s_axi_bvalid,
    m_axi_lite_ch1_bready   => s_axi_bready,
    m_axi_lite_ch1_araddr   => s_axi_araddr,
    m_axi_lite_ch1_arvalid  => s_axi_arvalid,
    m_axi_lite_ch1_arready  => s_axi_arready,
    m_axi_lite_ch1_rdata    => s_axi_rdata,
    m_axi_lite_ch1_rvalid   => s_axi_rvalid,
    m_axi_lite_ch1_rready   => s_axi_rready,
    m_axi_lite_ch1_rresp    => s_axi_rresp,
    done                    => atg_done,
    status                  => atg_status
  );

  ETH_SRC : axi_ethernetlite_0
    PORT MAP (
       s_axi_aclk     =>       ethernetlite_in_clk    ,
       s_axi_aresetn  =>       exdes_resetn ,
       ip2intc_irpt   =>       open  ,
       s_axi_awaddr   =>       s_axi_awaddr(12 downto 0)  ,
       s_axi_awvalid  =>       s_axi_awvalid ,
       s_axi_awready  =>       s_axi_awready ,
       s_axi_wdata    =>       s_axi_wdata   ,
       s_axi_wstrb    =>       s_axi_wstrb   ,
       s_axi_wvalid   =>       s_axi_wvalid  ,
       s_axi_wready   =>       s_axi_wready  ,
       s_axi_bresp    =>       s_axi_bresp   ,
       s_axi_bvalid   =>       s_axi_bvalid  ,
       s_axi_bready   =>       s_axi_bready  ,
       s_axi_araddr   =>       s_axi_araddr(12 downto 0)  ,
       s_axi_arvalid  =>       s_axi_arvalid ,
       s_axi_arready  =>       s_axi_arready ,
       s_axi_rdata    =>       s_axi_rdata   ,
       s_axi_rresp    =>       s_axi_rresp   ,
       s_axi_rvalid   =>       s_axi_rvalid  ,
       s_axi_rready   =>       s_axi_rready  ,
       phy_tx_clk     =>       phy_tx_clk    ,
       phy_rx_clk     =>       phy_rx_clk    ,
       phy_crs        =>       phy_crs       ,
       phy_dv         =>       phy_dv        ,
       phy_rx_data    =>       phy_rx_data   ,
       phy_col        =>       phy_col       ,
       phy_rx_er      =>       phy_rx_er     ,
       phy_rst_n      =>       phy_rst_n     ,
       phy_tx_en      =>       phy_tx_en     ,
       phy_tx_data    =>       phy_tx_data    
    );

DUT: <=:$ComponentName:>
    PORT MAP (
     rst_n            =>     locked    ,
     ref_clk          =>     exdes_clk       ,
     mac2rmii_tx_en   =>     phy_tx_en       ,
     mac2rmii_txd     =>     phy_tx_data     ,
     mac2rmii_tx_er   =>     '0'             ,
     rmii2mac_tx_clk  =>     phy_tx_clk      ,
     rmii2mac_rx_clk  =>     phy_rx_clk      ,
     rmii2mac_col     =>     phy_col         ,
     rmii2mac_crs     =>     phy_crs         ,
     rmii2mac_rx_dv   =>     phy_dv          ,
     rmii2mac_rx_er   =>     phy_rx_er       ,
     rmii2mac_rxd     =>     phy_rx_data     ,

     phy2rmii_crs_dv  =>     rmii2phy_tx_en  ,
     phy2rmii_rx_er   =>     '0'             ,
     phy2rmii_rxd     =>     rmii2phy_txd    ,
     rmii2phy_txd     =>     rmii2phy_txd    ,
     rmii2phy_tx_en   =>     rmii2phy_tx_en   
    );
END exdes_top_arch;
